# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def AnalyzeCrash(self, function_code: str,error_info: str,test_input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CrashAnalysis:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeCrash", args={
            "function_code": function_code,"error_info": error_info,"test_input": test_input,
        })
        return typing.cast(types.CrashAnalysis, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateCoverageImprovements(self, file_path: str,uncovered_functions: typing.List[str],missing_lines: typing.List[int],current_coverage: float,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.CoverageImprovement"]:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateCoverageImprovements", args={
            "file_path": file_path,"uncovered_functions": uncovered_functions,"missing_lines": missing_lines,"current_coverage": current_coverage,
        })
        return typing.cast(typing.List["types.CoverageImprovement"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateFuzzingInputs(self, function_signature: str,function_code: str,num_inputs: int,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.FuzzTestInput"]:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateFuzzingInputs", args={
            "function_signature": function_signature,"function_code": function_code,"num_inputs": num_inputs,
        })
        return typing.cast(typing.List["types.FuzzTestInput"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateUnitTestCases(self, function_signature: str,function_code: str,framework: str,docstring: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.UnitTestCase"]:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateUnitTestCases", args={
            "function_signature": function_signature,"function_code": function_code,"framework": framework,"docstring": docstring,
        })
        return typing.cast(typing.List["types.UnitTestCase"], result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCrash(self, function_code: str,error_info: str,test_input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.CrashAnalysis, types.CrashAnalysis]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeCrash", args={
            "function_code": function_code,"error_info": error_info,"test_input": test_input,
        })
        return baml_py.BamlStream[stream_types.CrashAnalysis, types.CrashAnalysis](
          result,
          lambda x: typing.cast(stream_types.CrashAnalysis, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.CrashAnalysis, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateCoverageImprovements(self, file_path: str,uncovered_functions: typing.List[str],missing_lines: typing.List[int],current_coverage: float,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.CoverageImprovement"], typing.List["types.CoverageImprovement"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateCoverageImprovements", args={
            "file_path": file_path,"uncovered_functions": uncovered_functions,"missing_lines": missing_lines,"current_coverage": current_coverage,
        })
        return baml_py.BamlStream[typing.List["stream_types.CoverageImprovement"], typing.List["types.CoverageImprovement"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.CoverageImprovement"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.CoverageImprovement"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateFuzzingInputs(self, function_signature: str,function_code: str,num_inputs: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.FuzzTestInput"], typing.List["types.FuzzTestInput"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateFuzzingInputs", args={
            "function_signature": function_signature,"function_code": function_code,"num_inputs": num_inputs,
        })
        return baml_py.BamlStream[typing.List["stream_types.FuzzTestInput"], typing.List["types.FuzzTestInput"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.FuzzTestInput"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.FuzzTestInput"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateUnitTestCases(self, function_signature: str,function_code: str,framework: str,docstring: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.UnitTestCase"], typing.List["types.UnitTestCase"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateUnitTestCases", args={
            "function_signature": function_signature,"function_code": function_code,"framework": framework,"docstring": docstring,
        })
        return baml_py.BamlStream[typing.List["stream_types.UnitTestCase"], typing.List["types.UnitTestCase"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.UnitTestCase"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.UnitTestCase"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeCrash(self, function_code: str,error_info: str,test_input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeCrash", args={
            "function_code": function_code,"error_info": error_info,"test_input": test_input,
        }, mode="request")
        return result
    async def GenerateCoverageImprovements(self, file_path: str,uncovered_functions: typing.List[str],missing_lines: typing.List[int],current_coverage: float,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateCoverageImprovements", args={
            "file_path": file_path,"uncovered_functions": uncovered_functions,"missing_lines": missing_lines,"current_coverage": current_coverage,
        }, mode="request")
        return result
    async def GenerateFuzzingInputs(self, function_signature: str,function_code: str,num_inputs: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateFuzzingInputs", args={
            "function_signature": function_signature,"function_code": function_code,"num_inputs": num_inputs,
        }, mode="request")
        return result
    async def GenerateUnitTestCases(self, function_signature: str,function_code: str,framework: str,docstring: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateUnitTestCases", args={
            "function_signature": function_signature,"function_code": function_code,"framework": framework,"docstring": docstring,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeCrash(self, function_code: str,error_info: str,test_input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeCrash", args={
            "function_code": function_code,"error_info": error_info,"test_input": test_input,
        }, mode="stream")
        return result
    async def GenerateCoverageImprovements(self, file_path: str,uncovered_functions: typing.List[str],missing_lines: typing.List[int],current_coverage: float,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateCoverageImprovements", args={
            "file_path": file_path,"uncovered_functions": uncovered_functions,"missing_lines": missing_lines,"current_coverage": current_coverage,
        }, mode="stream")
        return result
    async def GenerateFuzzingInputs(self, function_signature: str,function_code: str,num_inputs: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateFuzzingInputs", args={
            "function_signature": function_signature,"function_code": function_code,"num_inputs": num_inputs,
        }, mode="stream")
        return result
    async def GenerateUnitTestCases(self, function_signature: str,function_code: str,framework: str,docstring: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateUnitTestCases", args={
            "function_signature": function_signature,"function_code": function_code,"framework": framework,"docstring": docstring,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))