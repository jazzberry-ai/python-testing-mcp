# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (9)
# #########################################################################

class CoverageImprovement(BaseModel):
    file_path: typing.Optional[str] = None
    function_name: typing.Optional[str] = None
    current_coverage_percentage: typing.Optional[float] = None
    suggestion_type: typing.Optional[typing.Union[str, str, str]] = None
    priority: typing.Optional[typing.Union[str, str, str]] = None
    suggested_tests: typing.List[str]
    code_examples: typing.List[str]

class CrashAnalysis(BaseModel):
    root_cause: typing.Optional[str] = None
    severity: typing.Optional[typing.Union[str, str, str, str]] = None
    suggested_fix: typing.Optional[str] = None
    additional_test_cases: typing.List[str]

class FuzzTestInput(BaseModel):
    args: typing.List[typing.Optional[typing.Union[str, int, float, bool]]]
    kwargs: typing.Dict[str, typing.Optional[typing.Union[str, int, float, bool]]]
    description: typing.Optional[str] = None
    expected_behavior: typing.Optional[typing.Union[str, str, str]] = None

class Mutant(BaseModel):
    id: typing.Optional[str] = None
    operator_name: typing.Optional[str] = None
    original_code: typing.Optional[str] = None
    mutated_code: typing.Optional[str] = None
    line_number: typing.Optional[int] = None
    column_number: typing.Optional[int] = None
    function_name: typing.Optional[str] = None
    description: typing.Optional[str] = None

class MutationOperator(BaseModel):
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    category: typing.Optional[typing.Union[str, str, str, str, str, str]] = None
    original_pattern: typing.Optional[str] = None
    mutated_pattern: typing.Optional[str] = None
    risk_level: typing.Optional[typing.Union[str, str, str]] = None

class MutationReport(BaseModel):
    total_mutants: typing.Optional[int] = None
    killed_mutants: typing.Optional[int] = None
    survived_mutants: typing.Optional[int] = None
    timeout_mutants: typing.Optional[int] = None
    error_mutants: typing.Optional[int] = None
    mutation_score: typing.Optional[float] = None
    function_scores: typing.Dict[str, float]
    weak_areas: typing.List[str]
    improvement_suggestions: typing.List[str]

class MutationResult(BaseModel):
    mutant_id: typing.Optional[str] = None
    status: typing.Optional[typing.Union[str, str, str, str]] = None
    execution_time_ms: typing.Optional[int] = None
    test_output: typing.Optional[str] = None
    failing_tests: typing.List[str]
    error_message: typing.Optional[str] = None

class MutationStrategy(BaseModel):
    target_functions: typing.List[str]
    recommended_operators: typing.List["MutationOperator"]
    priority_areas: typing.List[str]
    expected_mutant_count: typing.Optional[int] = None
    rationale: typing.Optional[str] = None

class UnitTestCase(BaseModel):
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    test_code: typing.Optional[str] = None
    imports: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
