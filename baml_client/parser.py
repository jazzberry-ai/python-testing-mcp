# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCrash(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CrashAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeCrash", llm_response=llm_response, mode="request")
        return typing.cast(types.CrashAnalysis, result)

    def AnalyzeMutationResults(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MutationReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeMutationResults", llm_response=llm_response, mode="request")
        return typing.cast(types.MutationReport, result)

    def GenerateCoverageImprovements(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.CoverageImprovement"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateCoverageImprovements", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.CoverageImprovement"], result)

    def GenerateFuzzingInputs(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.FuzzTestInput"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateFuzzingInputs", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.FuzzTestInput"], result)

    def GenerateMutationStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MutationStrategy:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateMutationStrategy", llm_response=llm_response, mode="request")
        return typing.cast(types.MutationStrategy, result)

    def GenerateTestImprovements(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List[str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateTestImprovements", llm_response=llm_response, mode="request")
        return typing.cast(typing.List[str], result)

    def GenerateUnitTestCases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.UnitTestCase"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateUnitTestCases", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.UnitTestCase"], result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCrash(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CrashAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeCrash", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CrashAnalysis, result)

    def AnalyzeMutationResults(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MutationReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeMutationResults", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MutationReport, result)

    def GenerateCoverageImprovements(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.CoverageImprovement"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateCoverageImprovements", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.CoverageImprovement"], result)

    def GenerateFuzzingInputs(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.FuzzTestInput"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateFuzzingInputs", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.FuzzTestInput"], result)

    def GenerateMutationStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MutationStrategy:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateMutationStrategy", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MutationStrategy, result)

    def GenerateTestImprovements(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List[str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateTestImprovements", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List[str], result)

    def GenerateUnitTestCases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.UnitTestCase"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateUnitTestCases", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.UnitTestCase"], result)

    